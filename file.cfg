/*  $Id: file.cfg,v 1.5 1999/12/20 14:59:32 jan Exp $

    Part of Peter
    Designed and implemented by Jan Wielemaker
    Configuration by Pascal Wilhelm and Hedderik van Rijn

    E-mail: jan@swi.psy.uva.nl

    Copyright (C) 1997 University of Amsterdam. All rights reserved.

    See http://swi.psy.uva.nl/projects/il/peter for more information 
    about configuring FILE. 

*/

%	Title of the main window

title('Peter bikes to school').

%	message(Id, Message)
%
%	Used to redefine messages.  Settings here overrule settings in
%	the messages module that is compiled in.

message(file_login(Version),
	['FILE: Peter Task (version ', Version, ') Login']).

% Login dialog messages

message(replay,     'Replay log file').
message(ok,         'OK').
message(cancel,     'Cancel').

% Experimenting/Interface messages

message(prediction, 'Prediction').
message(result,     'Result').
message(take_back,  'Take back').
message(no_experiments_selected, 'At least two experiments should be selected').

% Finish/password messages

message(finished,   'Ready').
message(quit_peter, 'Quit FILE').
message(cancel_finish, 'Back to experimenting').
message(disable_experiments, 'Stop experimenting').
message(password,   'Password').
message(invalid_password, 'Invalid password!').

% Misc. messages

message(continue,   'Continue').
message(continue_,   'Continue...').

%	Window status
%
%	Initial status of the main window.  Choose between iconic, window
%	and full_screen. Full screen only working in MS Windows. 
%	window_style(Style) defines the style-properties.  toplevel makes
%	a normal window, `transient' window that can only be closed.

window_status(full_screen).
window_style(transient).

%	stretch_select_window(Boolean)
%
%	Stretch the contents of the left-window to fit its size.

stretch_select_window(false).

%	log
%	log_directory(Dir)
%	log_show_confirm(Boolean)
%
%	Dir denotes the base-directory for writing the log files.  It
%	is either a term of the form peter(DirRelativeToPeter), or
%	an absolute path.
%	If log_show_confirm(true) is specified, initialising the log
%	system is shown using a confirm-window.

log(true).
log_directory(peter(log)).
log_show_confirm(false).

log_comment('Created by Sinterklaas').
log_comment('(Sinterklaas is the Dutch version of Santa Claus)').

%	annotate

annotate(false).

%	Define the icon directory
%
%	peter(Name) refers to a directory relative to peter's home
%	directory.  You can also use an absolute or relative path.

icon_directory(peter(pictures)).

%	Icon repository for the theory viewer
%
%	text_icon_directory(Directory)
%		Directories to browse for icons
%
%	text_icon_size(Width, Height)
%
%	Sizes of icons to show.  Trick: use an _ if the size doesn't matter!

text_icon_directory(peter(icons)).
text_icon_directory(peter(pictures)).
text_icon_size(32,32).
text_icon_size(64,64).

%	Placement of the result window relative to the variable-selection
%	window (one of {left,below,above,right}).

result_window_placement(right).


%	Allow user to rearrange the order of the variables inside an
%	experiment, or the order of the experiments.

rearrange_variables(false).
rearrange_experiments(false).

%	Describe the layout of the experiment.  This is a list of (Row,Column)
%	coordinates.  The length of the list should match the number of
%	variables in the experiment.

%experiment_layout([(0,0), (1,0), (2,0), (3,0), (4,0)]).

%	labels for the `alternative' interface.

label(prediction, 'Prediction:').
label(answer,     'Time:').

%	Size of the experiment window, measured in experiments (WxH).

window_size(4,1).

%	Unit (experiments) to scroll.  Use the same as the with of the
%	window for natural scrolling.

%scroll_unit(2).
scroll_unit(1).

%	text(Name, ButtonLabel, File, Editable)

%text(theory, image('theory.xpm'), 'intro.html', false).
text(time,   @nil,		  'time.html', false).

%	pre_text(Name)
%	Name of text to show at startup.

%pre_text(theory).

%	button(Command, Label, Summary)
%	Generic command buttons.  Command should be a method defined on
%	class peter.

button(show_selection, image('magnify.xpm'),
       'View selected experiments').
button(finish, image('finish.xpm'),
       'I\'m ready!').

%	finish_password(Password)
%	Password for confirming finish

finish_text('Ask for the experimenter to enter the password "secret"ly...').
finish_password('secret').
finish_allow_for_quit(true).

%	Quit

quit_text('Thanks for participating').
quit_password('secret').

%	time_limit(Minutes)
%	Define time before automatic disable is activated.  Comment this
%	line to deactivate this.

time_limit(15).
time_exceeded_text(time).

%	Ask the user to predict a value before computing the result.

ask_prediction(true).

%	Beep the terminal if the subject presses the result-button. Argument
%	is the volume (0..100)

beep_on_result(100).

%	Defines the border around the prediction text.  This indirectly
%	dictates the height of the buttons for increment/decrement.
%	If omitted, 10 is used.

predictor_border(12).

%	Background images for putting cards and writing the answer

free_image('free.xpm').
answer_image('free.xpm').

%	variable(name, [Value=Image, ...])

variable(bike,
	 [ race		= 'bikerace.xpm',
	   normal	= 'bikenormal.xpm'
	 ]).
variable(breakfast,
	 [ athome	= 'breadathome.xpm',
	   bike		= 'breadbike.xpm'
	 ]).
variable(speed,
	 [ friends	= 'speedfriends.xpm',
	   normal	= 'speednormal.xpm',
	   fast		= 'speedfast.xpm'
	 ]).
variable(books,
	 [ extra	= 'booksall.xpm',
	   necessary	= 'booksnecessary.xpm'
	 ]).
variable(shoes,
	 [ normaal	= 'shoesnormal.xpm',
	   sport	= 'shoessport.xpm'
	 ]).
	 
%	Formulas.  The system displays the value of the variable $result
%	in the answer field.
%
%	Structure:
%
%		formula(Condition, Var = Expression).
%
%	Formulas are tested in order of appearance.
%
%	Condition  ::= and(Condition, ...)
%		     |  or(Condition, ...)
%		     |  Expression1 = oneof(Expression2, ...)
%		     |  Expression1 = Expression2
%		     |  Relation(Expression, ...)
%		     |  true
%
%	Expression ::= $VariableName
%		     | Function(Expression, ...)
%		     | number
%
%	Relation   ::= Any Prolog Predicate.  Some useful ones:
%		       < | > | =< | >=
%
%	Function   ::= Any Prolog Function.  Some useful ones:
%		       + | - | * | /
%
%	NOTE: In Prolog, +(A,B) is the same as A + B if `+' is
%	      an `infix operator'.  All `graphical' mathematical
%	      symbols are operators.  Use () for grouping: (a+b)*c.
%	NOTE: In general, you will need a space between a mathematical
%	      operator and the $-sign leading a variable.  Thus,
%	      a+$b is illegal syntax, and should be a + $b.
%	NOTE: All formulas are terminated by a full stop.


formula($bike = race,			        $tbike   = 20).
formula($bike = normal,   		        $tbike   = 10).

formula($breakfast = athome, 		        $tbreakfast = 0).
formula(and($breakfast = bike, $bike = normal), $tbreakfast = 0).
formula(and($breakfast = bike, $bike = race),   $tbreakfast = -15).

formula($speed = friends,		        $tspeed = -5).
formula($speed = normal,	 	        $tspeed = 0).
formula($speed = fast,		 	        $tspeed = 0).

formula(true,				        $tbooks = 0).

formula(true,				        $tshoes = 0).

formula(true,
	$result = 20 - ($tbike +
			$tbreakfast +
			$tspeed +
			$tbooks +
			$tshoes)).
     
% 	value_set([Value ...])
%
%	Defines the value-set used for the answer prediction.  

value_set([?,slow,0,5,10,15,20,fast]).


